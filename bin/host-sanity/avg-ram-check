#!/bin/sh
# checks that average ram usage does exceed specified percentage
#
ME_USAGE='[--help]|[--quiet,--verbose][--warn-percent=<PERCENT>][--uptime-min=<SECONDS> [--uptime-exit-normal]] <MAX-PERCENT>'
ME_NAME=$(basename $0)

#
# echo_info function
#
QUIET_MODE=0
echo_info() {
	if [ "$QUIET_MODE" = "0" ]; then echo "$@"; fi
}
VERBOSE_MODE=0
echo_extra() {
	if [ "$VERBOSE_MODE" != "0" ]; then echo "$@"; fi
}
#
# parse options
#
while getopts :huq-: arg; do
  case $arg in
    h|u ) HELP_MODE=1 ;;
    q ) QUIET_MODE=1 ;;
    - )  LONG_OPTARG="${OPTARG#*=}"
         case $OPTARG in
           warn-percent=*)WARN_PERCENT=$LONG_OPTARG ;;
           uptime-min=*)UPTIME_MIN=$LONG_OPTARG ;;
           uptime-exit-normal) UPTIME_EXIT_NORMAL=1 ;;
           help|usage) HELP_MODE=1 ;;
           quiet) QUIET_MODE=1 ;;  
           verbose) VERBOSE_MODE=1 ;;         
           '' )        break ;; # "--" terminates argument processing
           * )         >&2 echo "$ME_NAME: unknown option --$OPTARG"; exit 2 ;;
         esac ;;
    * )  >&2 echo "$ME_NAME: unknown option -$OPTARG"; exit 2 ;;
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

#
# help mode
#
[ "$HELP_MODE" = "1" ] && {
	echo "usage:"
	echo "  $ME_NAME $ME_USAGE"
	echo ""
	echo "arguments"
	echo "  <MAX-PERCENT>"
	echo "  Maximum amount of average ram usage allowed expressed as a percentage of total system ram."
	echo "  Terminate with exit status 3 if average ram usage as reported by the 'sar' command exceeds this value."
	echo "  Must be an integer value between 0 to 100."
	echo ""
	echo "options:"
	echo "  --warn-percent=<PERCENT>"
	echo "  Warning threshold of average ram usage expressed as a percentage of total system ram."
   echo "  Terminate with exit status 5 if average ram usage as reported by the 'sar' command exceeds this value."
   echo "  Must be an integer value between 0 to 100."
   echo "  Must be greater than the <MAX-PERCENT> argument."
	echo ""
	echo "  --uptime-min=<SECONDS>"
	echo "  Minimum amount of system uptime expressed in seconds."
	echo "  Terminate with exit status 8 if system uptime is less than this value."
	echo "  Must be an integer value."
	echo "  Note that this option exists beacuse 'sar' ram usage data does not persist after a reboot, which causes 'sar' to be unable to provide an average until it can collect enough data."
	echo ""
	echo "  --uptime-exit-normal"
	echo "  This flag may be used in conjunction with the --uptime-min option."
	echo "  Terminate normally (with exit status 0) if system uptime is less than the --uptime-min value."
	echo ""
	echo 'exit status meanings:'
	echo '    3: average ram usage exceeds maximum allowed'
	echo '    5: average ram usage exceeds warning threshold'
	echo '    7: missing dependency'
	echo '    8: system uptime is less than --uptime-min'
	echo '   10: sar output parse error'
	exit 0
}

#
# enforce <MAX-PERCENT> arg exists
#
MAX_PERCENT=$1
[ -n "$MAX_PERCENT" ] || {
	>&2 echo "$ME_NAME: missing <MAX-PERCENT> argument"; exit 2
}

percent_free_sanity() {
	local percent_free=$1
	local arglabel=$2
	[ $(expr "x$percent_free" : "x[0-9]*$") -gt 0 ] || {
  	>&2 echo "$ME_NAME: invalid $arglabel: must be numeric"; return 2
  }
  [ "$percent_free" -ge "0" ] || {
  	>&2 echo "$ME_NAME: invalid $arglabel: must be 0 or greater"; return 2
  }
  [ "$percent_free" -le "100" ] || {
  	>&2 echo "$ME_NAME: invalid $arglabel: must not exceed 100"; return 2
  }
}

#
# enforce MAX_PERCENT sanity
#
percent_free_sanity "$MAX_PERCENT" "<MAX-PERCENT>" || exit

#
# enforce WARN_PERCENT sanity
#
if [ ! -z "$WARN_PERCENT" ]; then
	percent_free_sanity "$WARN_PERCENT" "--warn-percent" || exit
	[ "$MAX_PERCENT" -lt "$WARN_PERCENT" ] || {
		>&2 echo "$ME_NAME: invalid --warn-percent: must be greater than <MAX-PERCENT> argument"
		exit 2
	}
fi

#
# enforce --uptime-min sanity
#
if [ ! -z "$UPTIME_MIN" ]; then
  [ $(expr "x$UPTIME_MIN" : "x[0-9]*$") -gt 0 ] || {
    >&2 echo "$ME_NAME: invalid --uptime-min: must be numeric"; exit 2
  }
  [ "$UPTIME_MIN" -gt "0" ] || {
    >&2 echo "$ME_NAME: invalid --uptime-min: must be 0 or greater"; exit 2
  }
fi

#
# enforce sar command available
#
sar -h > /dev/null 2>&1 || {
	>&2 echo "$ME_NAME: missing 'sar' command"; exit 7
}

#
# apply --uptime-min option
#
if [ ! -z "$UPTIME_MIN" ]; then
  UPTIME_SEC=$(awk '{print $1}' /proc/uptime | xargs printf "%.*f\n" 0) || {
    >&2 echo "$ME_NAME: failed to get system uptime, 'awk|xargs' terminated with exit status $?"
    exit 1
  }
  [ $(expr "x$UPTIME_SEC" : "x[0-9]*$") -gt 0 ] || {
    >&2 echo "$ME_NAME: failed to get system uptime, got non-numeric value from 'awk|xargs'"
    exit 1
  }
  if [ "$UPTIME_SEC" -lt "$UPTIME_MIN" ]; then
    echo_extra "system uptime: $UPTIME_SEC (--uptime-min: $UPTIME_MIN)"
    if [ "$UPTIME_EXIT_NORMAL" = "1" ]; then
      echo "system uptime is less than --uptime-min"
      echo_info "normal exit because --uptime-exit-normal flag is present"
      exit 0
    fi
    >&2 echo "system uptime is less than --uptime-min"
    exit 8
  fi
fi

#
# sar command
#
SAR=$(LC_TIME='POSIX' sar -r) || exit

#
# get sar header
#
SARHEAD=$(echo "$SAR" | head -3 | tail -1)
[ -n "$SARHEAD" ] || {
  >&2 echo "$ME_NAME: sar output parse error: unable to find column header in sar output:"
  >&2 echo "$SAR"
	exit 10
}
echo_extra "$SARHEAD"

#
# function to get sar column number from header
#
print_sar_colno() { colname=$1
	colno=$(echo "$SARHEAD" | awk '$1 == "'$colname'"{print NR;exit}' RS='[ \t]+') || {
		>&2 echo "$ME_NAME: sar output parse error: failed to parse sar header"
		return 10
	}
	[ -n "$colno" ] || {
		>&2 echo "$ME_NAME: sar output parse error: column '$colname' not found in sar header:"
		>&2 echo "$SARHEAD"
		return 10
	}
	echo $colno
}

#
# parse sar column numbers
#
MEMUSEDCOL=$(print_sar_colno kbmemused) || exit
KBUFFERCOL=$(print_sar_colno kbbuffers) || exit
KBCACHECOL=$(print_sar_colno kbcached) || exit
MEMFREECOL=$(print_sar_colno kbmemfree) || exit

#
# get sar average
#
SARAVG=$(echo "$SAR" | tail -1)
[ -n "$SARAVG" ] || {
  >&2 echo "$ME_NAME: sar output parse error: unable to find averages in sar output:"
  >&2 echo "$SAR"
	exit 10
}
echo_extra "$SARAVG"

print_sar_summary() {
	echo "$SARHEAD"
	echo "$SARAVG"
}

#
# parse sar report averages
#
MEMUSED=$(echo "$SARAVG" | awk '{print $'$MEMUSEDCOL'}') || exit
KBUFFER=$(echo "$SARAVG" | awk '{print $'$KBUFFERCOL'}') || exit
KBCACHE=$(echo "$SARAVG" | awk '{print $'$KBCACHECOL'}') || exit
MEMFREE=$(echo "$SARAVG" | awk '{print $'$MEMFREECOL'}') || exit

#
# enforce sanity of average values
#
[ $(expr "x$MEMUSED" : "x[0-9]*$") -gt 0 ] || {
	>&2 echo "$ME_NAME: sar output parse error: unexpected non-numeric output for sar MEMUSED '$MEMUSED'"
  >&2 print_sar_summary
  exit 10
}
[ $(expr "x$KBUFFER" : "x[0-9]*$") -gt 0 ] || {
	>&2 echo "$ME_NAME: sar output parse error: unexpected non-numeric output for sar KBUFFER '$KBUFFER'"
	>&2 print_sar_summary
  exit 10
}
[ $(expr "x$KBCACHE" : "x[0-9]*$") -gt 0 ] || {
	>&2 echo "$ME_NAME: sar output parse error: unexpected non-numeric output for sar KBCACHE '$KBCACHE'"
	>&2 print_sar_summary
  exit 10
}
[ $(expr "x$MEMFREE" : "x[0-9]*$") -gt 0 ] || {
	>&2 echo "$ME_NAME: sar output parse error: unexpected non-numeric output for sar MEMFREE '$MEMFREE'"
	>&2 print_sar_summary
  exit 10
}

#
# calculate total memory on system
#
MEMTOTL=$((MEMUSED+MEMFREE)) || exit

#
# calculate actual memory use 
# (don't include memory used for kernal cache or buffer)
#
REALUSED=$((MEMUSED-KBUFFER-KBCACHE)) || exit

#
# calculate actual memory use percentage
#
REALUSEDPCT=$((100 * $REALUSED / $MEMTOTL)) || exit

#
# enforce sanity of memory use percentage
#
[ "$REALUSEDPCT" -lt "0" ] && {
	 >&2 echo "$ME_NAME: sar output parse error: invalid percent calulated ($REALUSEDPCT)"
   exit 10
}

#
# enforce <MAX-PERCENT>
#
[ "$REALUSEDPCT" -gt "$MAX_PERCENT" ] && {
   >&2 echo "system average ram usage of $REALUSEDPCT% exceeds maximum allowed ($MAX_PERCENT%)"
   exit 3
}

#
# apply --warn-prcent option
#
if [ ! -z "$WARN_PERCENT" ]; then
	[ "$REALUSEDPCT" -gt "$WARN_PERCENT" ] && {
	   >&2 echo "system average ram usage of $REALUSEDPCT% exceeds warning threshold ($WARN_PERCENT%)"
	   exit 5
	}
fi

echo_info "ok: system has $REALUSEDPCT% average ram usage"