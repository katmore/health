#!/bin/sh
# checks 'unattended-upgrade' configuration
#
ME_DESC="checks 'unattended-upgrade' configuration"
ME_USAGE='[--reboot-on|--reboot-off][--download][--autoclean[--autoclean-interval-max=<NUM>]]'
ME_NAME=$(basename $0)
exit_status_meanings() {
	echo 'exit status meanings:'
  echo '    3: Update-Package-Lists or Unattended-Upgrade is not enabled'
  echo '    5: AutocleanInterval is not enabled'
  echo '    9: the unattended-upgrade package is not installed on the system'
  echo '   10: AutocleanInterval exceeds the --autoclean-interval-max value'
  echo '   15: Automatic-Reboot is not enabled'
  echo '   20: Download-Upgradeable-Packages is not enabled'
  echo '   25: Automatic-Reboot is enabled'
}
usage() {
	echo 'options:'
	echo '  --reboot-on'
  echo '    enforce that the apt config value "Unattended-Upgrade::Automatic-Reboot" is "true"'
  echo '  --reboot-off'
  echo '    enforce that the apt config value "Unattended-Upgrade::Automatic-Reboot" is NOT "true"'
  echo '  --download'
  echo '    enforce that the apt config value "APT::Periodic::Download-Upgradeable-Packages" is "1"'
	echo '  --autoclean'
  echo '    enforce that the apt config value "APT::Periodic::AutocleanInterval" is not "0"'
  echo '  --autoclean-interval-max=<NUM>'
  echo '    enforce that the apt config value "APT::Periodic::AutocleanInterval" is less than specified <NUM>'
}

#
# parse options
#
CHECK_AUTOCLEAN=0
CHECK_REBOOT=0
CHECK_REBOOT_DISABLED=0
CHECK_DOWNLOAD=0
AUTOCLEAN_INTERVAL_MAX=0
while getopts :huavq-: arg; do
  case $arg in
    h|u|a|v ) HELP_MODE=1 ;;
    q ) QUIET_MODE=1 ;;
    - )  LONG_OPTARG="${OPTARG#*=}"
         case $OPTARG in
         	 autoclean-interval-max=*)
         	    echo $LONG_OPTARG | egrep -q '^[0-9]+$' || {
         	    	>&2 echo "$ME_NAME: invalid --autoclean-interval-max, must be numeric"; exit 2
         	    }
         	    CHECK_AUTOCLEAN=1
         	    AUTOCLEAN_INTERVAL_MAX=$LONG_OPTARG
         	 	  ;;
           help|usage|about|version) HELP_MODE=1 ;;     
           check-autoclean|autoclean) CHECK_AUTOCLEAN=1 ;;
           check-reboot|reboot-on) CHECK_REBOOT=1 ;;
           check-download|download) CHECK_DOWNLOAD=1 ;;
           reboot-off) CHECK_REBOOT_DISABLED=1 ;;
           '' )        break ;; # "--" terminates argument processing
           * )         >&2 echo "$ME_NAME: unknown option --$OPTARG"; exit 2 ;;
         esac ;;
    * )  >&2 echo "$ME_NAME: unknown option -$OPTARG"; exit 2 ;;
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list

if ( [ "$CHECK_REBOOT_DISABLED" = "1" ] && [ "$CHECK_REBOOT" = "1" ] ); then
	>&2 echo "$ME_NAME: cannot use both --reboot --reboot-disable $OPTARG"; exit 2
fi

#
# help mode
#
[ "$HELP_MODE" = "1" ] && {
	printf "$ME_NAME\n$ME_DESC\n(c) 2018 Doug Bird Inc. All Rights Reserved.\n\n"
	printf "usage:\n  $ME_NAME $ME_USAGE\n\n"
  usage
  echo ""
  exit_status_meanings
	exit 0
}

#
# enforce debian based distro
#
[ -f "/etc/debian_version" ] || {
	>&2 echo "$ME_NAME: this script only works on debian based distros"
	exit 1
}

#
# function: check_apt_installed
#   determines if an apt package is installed 
#
check_apt_installed() {
	local package=$1
	dpkg-query --show --showformat='${db:Status-Status}\n' $package > /dev/null 2>&1 || {
		>&2 echo "apt package '$package' is not installed"
		return 9
	}
}

#---
# function: print_apt_config
#   prints value of an apt-config space
#---
print_apt_config() {
	 local space=$1
   local rawval
   rawval=$(apt-config dump "$space" | head -1 ) || {
      >&2 echo "$ME_NAME: 'apt-config dump' terminated with exit code $? using config space '$space'"
      return 1
   }
   [ ! -z "$rawval" ] || {
     >&2 echo "apt config space '$space' does not exist"
     return 6
   }
   echo $rawval | cut -d '"' -f2 || {
      >&2 echo "$ME_NAME: failed to parse apt config value, 'echo|cut' terminated with exit code $? using config space '$space'"
      return 1
   }
}

#
# function: check_apt_config
#   determines if apt-config space has a specified value
#
check_apt_config() {
	local space=$1
	local expect_val=$2
	local actual_val
  actual_val=$(print_apt_config $space) || return
  [ "$expect_val" = "$actual_val" ] || {
     >&2 echo "expected '$expect_val' for apt config space '$space', instead got '$actual_val'"
 	   return 3
  }
}

#
# enforce that 'unattended-upgrades' package is installed
#
check_apt_installed 'unattended-upgrades' || exit

#
# enforce that 'apt-get update' will be performed daily
#
check_apt_config 'APT::Periodic::Update-Package-Lists' '1' || {
	 CMD_STATUS=$?
	 case $CMD_STATUS in
	 	 3|6) exit 3 ;;
	 	 *) exit $CMD_STATUS ;;
	 esac
}

#
# enforce that updates will be installed daily
#
check_apt_config 'APT::Periodic::Unattended-Upgrade' '1' || {
	 CMD_STATUS=$?
	 case $CMD_STATUS in
	 	 3|6) exit 3 ;;
	 	 *) exit $CMD_STATUS ;;
	 esac
}

#
# apply --download option
#
if [ "$CHECK_DOWNLOAD" = "1" ]; then
  #
  # enforce that updates will be downloaded daily
  #
  check_apt_config 'APT::Periodic::Download-Upgradeable-Packages' '1' || {
		 CMD_STATUS=$?
		 case $CMD_STATUS in
		 	 3|6) exit 20 ;;
		 	 *) exit $CMD_STATUS ;;
		 esac
	}
fi

#
# apply --reboot-on option
#
if [ "$CHECK_REBOOT" = "1" ]; then
	check_apt_config 'Unattended-Upgrade::Automatic-Reboot' 'true' || {
		 CMD_STATUS=$?
		 case $CMD_STATUS in
		 	 3|6) exit 15 ;;
		 	 *) exit $CMD_STATUS ;;
		 esac
	}
fi

#
# apply --reboot-off option
#
if [ "$CHECK_REBOOT_DISABLED" = "1" ]; then
	check_apt_config 'Unattended-Upgrade::Automatic-Reboot' 'true' 2>/dev/null || {
		 CMD_STATUS=$?
		 case $CMD_STATUS in
		 	 3|6) ;;
		 	 0) 
		 	 >&2 echo "expected 'false' or empty for apt config space 'Unattended-Upgrade::Automatic-Reboot', instead got 'true'"
		 	 exit 25 
		 	 ;;
		 	 *) exit $CMD_STATUS ;;
		 esac
	}
fi

#
# apply --check-autoclean,--autoclean-interval-max options
#
if [ "$CHECK_AUTOCLEAN" = "1" ]; then

  #
  # enforce AutocleanInterval config exists
  #
  AUTOCLEAN_INTERVAL_KEY='APT::Periodic::AutocleanInterval'
  AUTOCLEAN_INTERVAL=$(print_apt_config $AUTOCLEAN_INTERVAL_KEY) || exit
  
  #
  # enforce AutocleanInterval is numeric
  #
  case $AUTOCLEAN_INTERVAL in [0-9]) ;; *) 
  	 >&2 echo "expected a numeric value for apt config space '$AUTOCLEAN_INTERVAL_KEY', instead got '$AUTOCLEAN_INTERVAL'"
     exit 1 ;;
  esac

  #
  # enforce AutocleanInterval is 1 or greater
  #
  [ "$AUTOCLEAN_INTERVAL" -gt "0" ] || {
     >&2 echo "autoclean is not enabled, got value of '$AUTOCLEAN_INTERVAL' in apt config space '$AUTOCLEAN_INTERVAL_KEY'"
  	 exit 5
  }
  
  if [ "$AUTOCLEAN_INTERVAL_MAX" != "0" ]; then
     [ "$AUTOCLEAN_INTERVAL" -le "$AUTOCLEAN_INTERVAL_MAX" ] || {
         >&2 echo "AutocleanInterval '$AUTOCLEAN_INTERVAL' exceeds --autoclean-interval-max of '$AUTOCLEAN_INTERVAL_MAX' in apt config space '$AUTOCLEAN_INTERVAL_KEY'"
      	 exit 5
      }
  fi

fi






